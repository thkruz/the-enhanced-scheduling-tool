---
name: Build Pipeline

on:
  workflow_dispatch:
  pull_request:
    branches:
      - master
      - develop

jobs:
  lint-yml:
    name: Yaml Lint
    runs-on: ubuntu-latest
    steps:
      # Checkout Code
      - name: Checkout Code
        uses: actions/checkout@v2
      # Lint Yaml Code
      - name: YAML Lint
        uses: ibiqlik/action-yamllint@v3.1.0
        with:
          file_or_dir: ${{ github.workspace }}/
            .github/workflows/build-pipeline.yml
  compliance:
    needs: lint-yml
    name: NPM Audit Report
    runs-on: ubuntu-latest
    steps:
      # Checkout Code
      - name: Checkout Code
        uses: actions/checkout@v2
      # Audit Package.json
      - name: NPM Audit Action
        uses: oke-py/npm-audit-action@v1.8.2
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
  eslint:
    needs: compliance
    name: Lint
    runs-on: ubuntu-latest

    steps:
      # Checkout code
      - name: Checkout Code
        uses: actions/checkout@v2
      # Setup Node
      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: "17"
      # Get Node Modules from Cache
      - name: Cache node modules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          path: ~/.npm
          key: ${{ runner.os }}-build-
            ${{ env.cache-name }}-
            ${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      # Ensure Node Modules Setup
      - name: Install Dependencies
        run: cd frontend && npm ci --ignore-scripts
      # Run ESLint
      - name: ESLint
        run: npx eslint . --ignore-path .gitignore --ext js,mjs,cjs,jsx
  unit-tests:
    needs: compliance
    name: Unit Tests
    runs-on: ubuntu-latest

    steps:
      # Checkout code
      - name: Checkout Code
        uses: actions/checkout@v2
      # Setup Node
      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: "17"
      # Get Node Modules from Cache
      - name: Cache node modules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          path: ~/.npm
          key: ${{ runner.os }}-build-
            ${{ env.cache-name }}-
            ${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      # Ensure Node Modules Setup
      - name: Install Dependencies
        run: cd frontend && npm ci --ignore-scripts
      # Set Timezone to match snapshots
      - name: Set Timezone
        uses: szenius/set-timezone@v1.0
        with:
          timezoneLinux: "America/New_York"
      # Unit Tests
      - name: Test
        run: npm run test:frontend
  build:
    needs: [eslint, unit-tests]
    name: Build
    runs-on: ubuntu-latest

    steps:
      # Checkout code
      - name: Checkout Code
        uses: actions/checkout@v2
      # Setup Node
      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: "17"
      # Get Node Modules from Cache
      - name: Cache node modules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          path: ~/.npm
          key: ${{ runner.os }}-build-
            ${{ env.cache-name }}-
            ${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      # Ensure Node Modules Setup
      - name: Install Dependencies
        run: cd frontend && npm ci --ignore-scripts
      # Build
      - name: Build
        run: npm run build:frontend
  trufflehog:
    needs: build
    name: TruffleHog
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: trufflehog-actions-scan
        uses: edplato/trufflehog-actions-scan@master
  analyze:
    needs: build
    name: SonarQube
    runs-on: ubuntu-latest

    steps:
      # Checkout code
      - name: Checkout Code
        uses: actions/checkout@v2
      # SonarQube
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@v1.6
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
